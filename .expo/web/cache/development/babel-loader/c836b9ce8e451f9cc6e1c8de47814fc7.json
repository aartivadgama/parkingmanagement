{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Component } from 'react';\n\nvar HomeController = function (_Component) {\n  _inherits(HomeController, _Component);\n\n  var _super = _createSuper(HomeController);\n\n  function HomeController(props) {\n    var _this;\n\n    _classCallCheck(this, HomeController);\n\n    _this = _super.call(this, props);\n\n    _this.setupAnArray = function () {\n      var _this$state = _this.state,\n          numLots = _this$state.numLots,\n          arrLot = _this$state.arrLot;\n\n      for (var i = 0; i < numLots; i++) {\n        var dic = {\n          id: \"\" + i,\n          carNum: \"\",\n          isAlloted: false,\n          inTime: \"\",\n          outTime: \"\"\n        };\n        arrLot.push(dic);\n      }\n\n      _this.setState({});\n\n      console.log(\"this\", _this.state.arrLot);\n    };\n\n    _this.onChangeTextNumLot = function (val) {\n      _this.setState({\n        carNumber: val\n      });\n    };\n\n    _this.validateInput = function (strLot) {\n      if (strLot === '') {\n        _this.setState({\n          error: \"Please enter car number\"\n        });\n\n        return false;\n      } else {\n        _this.setState({\n          error: \"\"\n        });\n\n        return true;\n      }\n    };\n\n    _this.onPressAddCar = function () {\n      var name = _this.state.carNumber;\n\n      var validate = _this.validateInput(name);\n\n      if (validate) {\n        var filter = _this.state.arrLot.filter(function (item) {\n          return item.isAlloted == false;\n        });\n\n        if (filter.length > 0) {\n          var min = 0;\n          var max = filter.length - 1;\n          var random = min + Math.random() * (max - min);\n          console.log(\"random\", random);\n          var index = Math.floor(random);\n          ;\n          var tmp = filter[index];\n          var arrIndex = Number(tmp.id);\n          tmp.isAlloted = true;\n          tmp.carNum = name;\n          _this.state.arrLot[arrIndex] = tmp;\n\n          _this.setState({\n            carNumber: \"\"\n          });\n        } else {\n          _this.setState({\n            showDialog: true,\n            carNumber: \"\"\n          });\n        }\n      }\n    };\n\n    _this.onPressExitCar = function (index) {};\n\n    console.log(\"props lot\", props.route.params.item);\n    var today = new Date();\n    var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n    _this.state = {\n      numLots: props.route.params.item,\n      arrLot: [],\n      showDialog: false,\n      carNumber: '',\n      error: ''\n    };\n    return _this;\n  }\n\n  _createClass(HomeController, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setupAnArray();\n    }\n  }]);\n\n  return HomeController;\n}(Component);\n\nexport { HomeController as default };","map":{"version":3,"sources":["/Users/aarti/Desktop/AtharvaSystem/RNProject_Learning/ParkingManagementApp/src/screens/HomeController.tsx"],"names":["Component","HomeController","props","setupAnArray","state","numLots","arrLot","i","dic","id","carNum","isAlloted","inTime","outTime","push","setState","console","log","onChangeTextNumLot","val","carNumber","validateInput","strLot","error","onPressAddCar","name","validate","filter","item","length","min","max","random","Math","index","floor","tmp","arrIndex","Number","showDialog","onPressExitCar","route","params","today","Date","date","getFullYear","getMonth","getDate"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;;IAeqBC,c;;;;;AACjB,0BAAYC,KAAZ,EAAwB;AAAA;;AAAA;;AACpB,8BAAMA,KAAN;;AADoB,UAqBxBC,YArBwB,GAqBT,YAAM;AACjB,wBAA4B,MAAKC,KAAjC;AAAA,UAAQC,OAAR,eAAQA,OAAR;AAAA,UAAiBC,MAAjB,eAAiBA,MAAjB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAApB,EAA6BE,CAAC,EAA9B,EAAkC;AAC9B,YAAIC,GAAQ,GAAG;AACXC,UAAAA,EAAE,OAAKF,CADI;AAEXG,UAAAA,MAAM,EAAE,EAFG;AAGXC,UAAAA,SAAS,EAAE,KAHA;AAIXC,UAAAA,MAAM,EAAE,EAJG;AAKXC,UAAAA,OAAO,EAAE;AALE,SAAf;AAOAP,QAAAA,MAAM,CAACQ,IAAP,CAAYN,GAAZ;AACH;;AAED,YAAKO,QAAL,CAAc,EAAd;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,MAAKb,KAAL,CAAWE,MAA/B;AACH,KArCuB;;AAAA,UAuCxBY,kBAvCwB,GAuCH,UAACC,GAAD,EAAiB;AAClC,YAAKJ,QAAL,CAAc;AAAEK,QAAAA,SAAS,EAAED;AAAb,OAAd;AACH,KAzCuB;;AAAA,UA2CxBE,aA3CwB,GA2CR,UAACC,MAAD,EAAoB;AAChC,UAAIA,MAAM,KAAK,EAAf,EAAmB;AACf,cAAKP,QAAL,CAAc;AAAEQ,UAAAA,KAAK,EAAE;AAAT,SAAd;;AACA,eAAO,KAAP;AACH,OAHD,MAGO;AACH,cAAKR,QAAL,CAAc;AAAEQ,UAAAA,KAAK,EAAE;AAAT,SAAd;;AACA,eAAO,IAAP;AACH;AACJ,KAnDuB;;AAAA,UAqDxBC,aArDwB,GAqDR,YAAM;AAClB,UAAIC,IAAY,GAAG,MAAKrB,KAAL,CAAWgB,SAA9B;;AAEA,UAAIM,QAAQ,GAAG,MAAKL,aAAL,CAAmBI,IAAnB,CAAf;;AACA,UAAIC,QAAJ,EAAc;AAGV,YAAIC,MAAM,GAAG,MAAKvB,KAAL,CAAWE,MAAX,CAAkBqB,MAAlB,CAAyB,UAAUC,IAAV,EAAgB;AAClD,iBAAOA,IAAI,CAACjB,SAAL,IAAkB,KAAzB;AACH,SAFY,CAAb;;AAIA,YAAIgB,MAAM,CAACE,MAAP,GAAgB,CAApB,EAAuB;AAEnB,cAAIC,GAAW,GAAG,CAAlB;AACA,cAAIC,GAAW,GAAIJ,MAAM,CAACE,MAAP,GAAgB,CAAnC;AAEA,cAAIG,MAAc,GAAGF,GAAG,GAAIG,IAAI,CAACD,MAAL,MAAiBD,GAAG,GAAGD,GAAvB,CAA5B;AACAd,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBe,MAAtB;AACA,cAAIE,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAWH,MAAX,CAAZ;AAA+B;AAE/B,cAAII,GAAQ,GAAGT,MAAM,CAACO,KAAD,CAArB;AACA,cAAIG,QAAQ,GAAGC,MAAM,CAACF,GAAG,CAAC3B,EAAL,CAArB;AAEA2B,UAAAA,GAAG,CAACzB,SAAJ,GAAgB,IAAhB;AACAyB,UAAAA,GAAG,CAAC1B,MAAJ,GAAae,IAAb;AACA,gBAAKrB,KAAL,CAAWE,MAAX,CAAkB+B,QAAlB,IAA8BD,GAA9B;;AACA,gBAAKrB,QAAL,CAAc;AAACK,YAAAA,SAAS,EAAE;AAAZ,WAAd;AAEH,SAjBD,MAiBO;AACH,gBAAKL,QAAL,CAAc;AAAEwB,YAAAA,UAAU,EAAE,IAAd;AAAoBnB,YAAAA,SAAS,EAAC;AAA9B,WAAd;AACH;AACJ;AACJ,KArFuB;;AAAA,UAuFxBoB,cAvFwB,GAuFP,UAACN,KAAD,EAAmB,CAEnC,CAzFuB;;AAEpBlB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBf,KAAK,CAACuC,KAAN,CAAYC,MAAZ,CAAmBd,IAA5C;AAEA,QAAIe,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AAEJ,QAAIC,IAAI,GAAGF,KAAK,CAACG,WAAN,KAAoB,GAApB,IAAyBH,KAAK,CAACI,QAAN,KAAiB,CAA1C,IAA6C,GAA7C,GAAiDJ,KAAK,CAACK,OAAN,EAA5D;AAEI,UAAK5C,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAEH,KAAK,CAACuC,KAAN,CAAYC,MAAZ,CAAmBd,IADnB;AAETtB,MAAAA,MAAM,EAAE,EAFC;AAGTiC,MAAAA,UAAU,EAAE,KAHH;AAITnB,MAAAA,SAAS,EAAE,EAJF;AAKTG,MAAAA,KAAK,EAAE;AALE,KAAb;AARoB;AAevB;;;;WAED,6BAAoB;AAChB,WAAKpB,YAAL;AACH;;;;EApBuCH,S;;SAAvBC,c","sourcesContent":["import { Component } from 'react'\nimport { lot } from '../model/lot';\n\ninterface props {\n    navigation: any;\n}\n\ninterface state {\n    numLots: number;\n    arrLot: Array<lot>;\n    showDialog: boolean;\n    carNumber: string;\n    error: string;\n}\n\nexport default class HomeController extends Component<props, state> {\n    constructor(props: any) {\n        super(props);\n        console.log(\"props lot\", props.route.params.item);\n\n        let today = new Date();\n\n    let date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n    \n        this.state = {\n            numLots: props.route.params.item,\n            arrLot: [],\n            showDialog: false,\n            carNumber: '',\n            error: '',\n        }\n    }\n\n    componentDidMount() {\n        this.setupAnArray();\n    }\n\n    setupAnArray = () => {\n        const { numLots, arrLot } = this.state;\n\n        for (let i = 0; i < numLots; i++) {\n            let dic: lot = {\n                id: `${i}`,\n                carNum: \"\",\n                isAlloted: false,\n                inTime: \"\",\n                outTime: \"\",\n            }\n            arrLot.push(dic);\n        }\n\n        this.setState({});\n        console.log(\"this\", this.state.arrLot);\n    }\n\n    onChangeTextNumLot = (val: string) => {\n        this.setState({ carNumber: val });\n    }\n\n    validateInput = (strLot: string) => {\n        if (strLot === '') {\n            this.setState({ error: \"Please enter car number\" })\n            return false;\n        } else {\n            this.setState({ error: \"\" })\n            return true;\n        }\n    }\n\n    onPressAddCar = () => {\n        let name: string = this.state.carNumber;\n\n        let validate = this.validateInput(name);\n        if (validate) {\n\n\n            let filter = this.state.arrLot.filter(function (item) {\n                return item.isAlloted == false;\n            });\n\n            if (filter.length > 0) {\n\n                let min: number = 0;\n                let max: number = (filter.length - 1);\n\n                let random: number = min + (Math.random() * (max - min))\n                console.log(\"random\", random);\n                var index = Math.floor(random);; //10\n\n                var tmp: lot = filter[index];\n                let arrIndex = Number(tmp.id);\n\n                tmp.isAlloted = true;\n                tmp.carNum = name;\n                this.state.arrLot[arrIndex] = tmp\n                this.setState({carNumber: \"\"});\n\n            } else {\n                this.setState({ showDialog: true, carNumber:\"\" });\n            }\n        }\n    }\n\n    onPressExitCar = (index: number) => {\n\n    }\n}"]},"metadata":{},"sourceType":"module"}