{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Button, Text } from \"react-native-paper\";\nimport HomeController from \"./HomeController\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport { Paragraph, Dialog, TextInput, HelperText } from 'react-native-paper';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar deviceWidth = Dimensions.get('window').width;\nvar column = 3;\nvar columnHeight = 120;\n\nvar HomeView = function (_HomeController) {\n  _inherits(HomeView, _HomeController);\n\n  var _super = _createSuper(HomeView);\n\n  function HomeView() {\n    var _this;\n\n    _classCallCheck(this, HomeView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.renderItem = function (item) {\n      console.log(\"item\", item);\n      return _jsx(View, {\n        style: styles.viewStyle,\n        children: _jsxs(Text, {\n          children: [\"y\", item.id]\n        })\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(HomeView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(\"Hiiiii, this.state.arrLot\", this.state.arrLot.length);\n      return _jsxs(View, {\n        style: styles.view,\n        children: [_jsx(View, {\n          style: styles.separator\n        }), _jsxs(View, {\n          style: styles.viewAddCar,\n          children: [_jsxs(View, {\n            children: [_jsx(TextInput, {\n              style: styles.inputStyle,\n              label: \"Enter Car Number\",\n              autoComplete: false,\n              value: this.state.carNumber,\n              onChangeText: function onChangeText(text) {\n                return _this2.onChangeTextNumLot(text);\n              }\n            }), _jsx(HelperText, {\n              style: {\n                marginVertical: 10\n              },\n              type: \"error\",\n              children: this.state.error\n            })]\n          }), _jsx(Button, {\n            style: {\n              height: 40\n            },\n            mode: \"contained\",\n            onPress: function onPress() {\n              _this2.onPressAddCar();\n            },\n            children: \"Add Car\"\n          })]\n        }), _jsx(View, {\n          style: styles.separator\n        }), _jsx(FlatList, {\n          style: {\n            width: deviceWidth * 0.8\n          },\n          extraData: this.state,\n          data: this.state.arrLot,\n          renderItem: function renderItem(_ref) {\n            var item = _ref.item,\n                index = _ref.index;\n            return _jsxs(View, {\n              style: styles.viewStyle,\n              children: [_jsx(Button, {\n                icon: \"logout\",\n                onPress: function onPress() {\n                  _this2.onPressExitCar(index);\n                },\n                children: \"Exit\"\n              }), item.isAlloted ? _jsx(Icon, {\n                name: \"car\",\n                size: 35,\n                color: \"#00000\"\n              }) : _jsx(Icon, {\n                name: \"close\",\n                size: 35,\n                color: \"#696969\"\n              }), _jsxs(Text, {\n                children: [\"No: \", item.carNum]\n              })]\n            });\n          },\n          numColumns: column,\n          keyExtractor: function keyExtractor(item, index) {\n            return index.toString();\n          }\n        }), _jsxs(Dialog, {\n          visible: this.state.showDialog,\n          onDismiss: function onDismiss() {\n            _this2.setState({\n              showDialog: false\n            });\n          },\n          children: [_jsx(Dialog.Title, {\n            children: \"Sorry\"\n          }), _jsx(Dialog.Content, {\n            children: _jsx(Paragraph, {\n              children: \"All solts are booked\"\n            })\n          }), _jsx(Dialog.Actions, {\n            children: _jsx(Button, {\n              onPress: function onPress() {\n                _this2.setState({\n                  showDialog: false\n                });\n              },\n              children: \"Done\"\n            })\n          })]\n        }), _jsxs(Dialog, {\n          visible: this.state.showPaymentDialog,\n          onDismiss: function onDismiss() {},\n          children: [_jsx(Dialog.Title, {\n            children: \"Exit Car\"\n          }), _jsx(Dialog.Content, {\n            children: _jsx(Paragraph, {\n              children: \"Your payable amount is \"\n            })\n          }), _jsx(Dialog.Actions, {\n            children: _jsx(Button, {\n              onPress: function onPress() {},\n              children: \"PAY\"\n            })\n          }), _jsx(Dialog.Actions, {\n            children: _jsx(Button, {\n              onPress: function onPress() {\n                _this2.setState({\n                  showPaymentDialog: false\n                });\n              },\n              children: \"Done\"\n            })\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return HomeView;\n}(HomeController);\n\nexport { HomeView as default };\nvar styles = StyleSheet.create({\n  view: {\n    flex: 1,\n    alignItems: \"center\",\n    backgroundColor: 'white'\n  },\n  viewAddCar: {\n    flexDirection: \"row\"\n  },\n  separator: {\n    height: 20\n  },\n  viewStyle: {\n    height: columnHeight,\n    margin: 10,\n    padding: 10,\n    backgroundColor: \"#d1d1d1\",\n    alignItems: \"center\",\n    width: (deviceWidth * 0.7 - column * 10) / column\n  },\n  icon: {\n    height: columnHeight,\n    margin: 10,\n    padding: 10,\n    width: (deviceWidth * 0.7 - column * 10) / column\n  },\n  inputStyle: {\n    width: deviceWidth * 0.7,\n    height: 50\n  }\n});","map":{"version":3,"sources":["/Users/aarti/Desktop/AtharvaSystem/RNProject_Learning/ParkingManagementApp/src/screens/HomeView.tsx"],"names":["React","Button","Text","HomeController","Icon","Paragraph","Dialog","TextInput","HelperText","deviceWidth","Dimensions","get","width","column","columnHeight","HomeView","renderItem","item","console","log","styles","viewStyle","id","state","arrLot","length","view","separator","viewAddCar","inputStyle","carNumber","text","onChangeTextNumLot","marginVertical","error","height","onPressAddCar","index","onPressExitCar","isAlloted","carNum","toString","showDialog","setState","showPaymentDialog","StyleSheet","create","flex","alignItems","backgroundColor","flexDirection","margin","padding","icon"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { View, StyleSheet, FlatList, Dimensions } from \"react-native\"\nimport { Button, Text } from \"react-native-paper\";\nimport HomeController from \"./HomeController\";\nimport { lot } from \"../model/lot\";\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport { Paragraph, Dialog, TextInput, HelperText } from 'react-native-paper';\n\nlet deviceWidth = Dimensions.get('window').width;\nlet column: number = 3;\nlet columnHeight: number = 120;\n\nexport default class HomeView extends HomeController {\n\n    renderItem = (item: lot) => {\n        console.log(\"item\", item)\n        return (\n            <View style={styles.viewStyle}>\n                <Text>y{item.id}</Text>\n            </View>\n        );\n    }\n\n    render() {\n        console.log(\"Hiiiii, this.state.arrLot\", this.state.arrLot.length);\n        return (\n            <View style={styles.view}>\n                <View style={styles.separator} />\n                <View style={styles.viewAddCar}>\n                    <View>\n                        <TextInput\n                            style={styles.inputStyle}\n                            label=\"Enter Car Number\"\n                            autoComplete={false}\n                            value={this.state.carNumber}\n                            onChangeText={(text: string) => this.onChangeTextNumLot(text)}\n                        />\n                        <HelperText style={{ marginVertical: 10 }} type=\"error\">\n                            {this.state.error}\n                        </HelperText>\n                    </View>\n                    <Button style={{ height: 40 }} mode=\"contained\" onPress={() => {\n                        this.onPressAddCar();\n                    }}>\n                        Add Car\n                    </Button>\n                </View>\n                <View style={styles.separator} />\n\n                <FlatList\n                    style={{ width: deviceWidth * 0.8 }}\n                    extraData={this.state}\n                    data={this.state.arrLot}\n                    renderItem={({ item, index }) => {\n                        return (\n                            <View style={styles.viewStyle}>\n                                <Button icon=\"logout\" onPress={() => {\n                                    this.onPressExitCar(index);\n                                }}>\n                                    Exit\n                                </Button>\n                                {item.isAlloted ?\n                                    <Icon name=\"car\" size={35} color=\"#00000\" />\n                                    : <Icon name=\"close\" size={35} color=\"#696969\" />\n\n                                }\n                                <Text>No: {item.carNum}</Text>\n                            </View>\n                        );\n                    }}\n                    numColumns={column}\n                    keyExtractor={(item, index) => index.toString()}\n                />\n\n                <Dialog visible={this.state.showDialog} onDismiss={() => {\n                    this.setState({ showDialog: false })\n                }}>\n                    <Dialog.Title>Sorry</Dialog.Title>\n                    <Dialog.Content>\n                        <Paragraph>All solts are booked</Paragraph>\n                    </Dialog.Content>\n                    <Dialog.Actions>\n                        <Button onPress={() => {\n                            this.setState({ showDialog: false })\n                        }}>Done</Button>\n                    </Dialog.Actions>\n                </Dialog>\n\n                <Dialog visible={this.state.showPaymentDialog} onDismiss={() => {}}>\n                    <Dialog.Title>Exit Car</Dialog.Title>\n                    <Dialog.Content>\n                        <Paragraph>Your payable amount is </Paragraph>\n                    </Dialog.Content>\n                    <Dialog.Actions>\n                        <Button onPress={() => {\n\n                        }}>PAY</Button>\n                    </Dialog.Actions>\n                    <Dialog.Actions>\n                        <Button onPress={() => {\n                            this.setState({ showPaymentDialog: false })\n                        }}>Done</Button>\n                    </Dialog.Actions>\n                </Dialog>\n            </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    view: {\n        flex: 1,\n        alignItems: \"center\",\n        backgroundColor: 'white',\n    },\n    viewAddCar: {\n        flexDirection: \"row\",\n    },\n    separator: {\n        height: 20,\n    },\n    viewStyle: {\n        height: columnHeight,\n        margin: 10,\n        padding: 10,\n        backgroundColor: \"#d1d1d1\",\n        alignItems: \"center\",\n        width: ((deviceWidth * 0.7) - (column * 10)) / column,\n    },\n    icon: {\n        height: columnHeight,\n        margin: 10,\n        padding: 10,\n        width: ((deviceWidth * 0.7) - (column * 10)) / column,\n    },\n    inputStyle: {\n        width: deviceWidth * 0.7,\n        height: 50\n    }\n});"]},"metadata":{},"sourceType":"module"}